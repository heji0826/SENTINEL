# Header: Set diagnostic information
- set_fact:
    diag: "{{ {'항목': 'root 권한으로 서버 구동 제한', 'id': 5, '조치방안': 'mysql server config 파일에서 [mysqld] 그룹의 user 지시자 설정'} }}"

- set_fact:
    result: []

# 1. Check MySQL configuration for user directive
- name: Check if MySQL user directive is set to 'mysql'
  command: grep '^user=' /etc/my.cnf
  register: mysql_user_check
  failed_when: mysql_user_check.rc != 0
  changed_when: False

# 2. If user directive is not 'mysql', update it
- name: Update MySQL configuration to set user to 'mysql'
  lineinfile:
    path: /etc/my.cnf
    regexp: '^user='
    line: 'user=mysql'
  when: "'user=mysql' not in mysql_user_check.stdout"

# 3. Recheck MySQL configuration after update
- name: Recheck if MySQL user directive is now set to 'mysql'
  command: grep '^user=' /etc/my.cnf
  register: recheck_mysql_user
  failed_when: recheck_mysql_user.rc != 0
  changed_when: False

# 4. Evaluate result based on MySQL user directive status after recheck
- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True, '조치방안': diag.조치방안}] }}"
  when: "'user=mysql' not in recheck_mysql_user.stdout"

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False, '조치방안': diag.조치방안}] }}"
  when: "'user=mysql' in recheck_mysql_user.stdout"

# 5. Final result output
- name: 최종 결과 출력
  debug:
    var: result
