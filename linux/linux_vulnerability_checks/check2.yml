# header
- set_fact:
    diag: "Password Complexity and enforce_for_root Check"  # 점검 내용 이름
    num: 2  # 점검 번호

# body

# Step 1: Check enforce_for_root in /etc/pam.d/system-auth
- name: Check enforce_for_root setting in /etc/pam.d/system-auth
  ansible.builtin.shell: grep enforce_for_root /etc/pam.d/system-auth
  register: enforce_for_root_setting
  ignore_errors: yes

# Step 2: Check password complexity in /etc/security/pwquality.conf or /etc/pam.d/system-auth
- name: Check password complexity in /etc/security/pwquality.conf
  ansible.builtin.shell: |
    grep -E 'minlen|dcredit|ucredit|lcredit|ocredit' /etc/security/pwquality.conf
  register: pwquality_conf_complexity
  ignore_errors: yes

- name: Check password complexity in /etc/pam.d/system-auth
  ansible.builtin.shell: |
    grep -E 'minlen|dcredit|ucredit|lcredit|ocredit' /etc/pam.d/system-auth
  register: system_auth_complexity
  ignore_errors: yes

# weak?
# Min length and credit definitions
- set_fact:
    # pwquality_conf_complexity에서 minlen을 직접 확인
    minlen_pwq: >
      {% set pwq_value = pwquality_conf_complexity.stdout.split('minlen=')[1] | default('0') %}
      {% set pwq_value_clean = pwq_value.split()[0] %}
      {{ pwq_value_clean | regex_replace('[^0-9]', '') | int }}

    # system_auth_complexity에서 minlen을 직접 확인
    minlen_sys: >
      {% set sys_value = system_auth_complexity.stdout.split('minlen=')[1] | default('0') %}
      {% set sys_value_clean = sys_value.split()[0] %}
      {{ sys_value_clean | regex_replace('[^0-9]', '') | int }}

    # 각 credit 값을 pwquality_conf_complexity에서 추출
    dcredit_pwq: >
      {% set pwq_value = pwquality_conf_complexity.stdout.split('dcredit=')[1] | default('0') %}
      {% set pwq_value_clean = pwq_value.split()[0] %}
      {{ pwq_value_clean | regex_replace('[^0-9-]', '') | int }}

    ucredit_pwq: >
      {% set pwq_value = pwquality_conf_complexity.stdout.split('ucredit=')[1] | default('0') %}
      {% set pwq_value_clean = pwq_value.split()[0] %}
      {{ pwq_value_clean | regex_replace('[^0-9-]', '') | int }}

    lcredit_pwq: >
      {% set pwq_value = pwquality_conf_complexity.stdout.split('lcredit=')[1] | default('0') %}
      {% set pwq_value_clean = pwq_value.split()[0] %}
      {{ pwq_value_clean | regex_replace('[^0-9-]', '') | int }}

    ocredit_pwq: >
      {% set pwq_value = pwquality_conf_complexity.stdout.split('ocredit=')[1] | default('0') %}
      {% set pwq_value_clean = pwq_value.split()[0] %}
      {{ pwq_value_clean | regex_replace('[^0-9-]', '') | int }}

    # 각 credit 값을 system_auth_complexity에서 추출
    dcredit_sys: >
      {% set sys_value = system_auth_complexity.stdout.split('dcredit=')[1] | default('0') %}
      {% set sys_value_clean = sys_value.split()[0] %}
      {{ sys_value_clean | regex_replace('[^0-9-]', '') | int }}

    ucredit_sys: >
      {% set sys_value = system_auth_complexity.stdout.split('ucredit=')[1] | default('0') %}
      {% set sys_value_clean = sys_value.split()[0] %}
      {{ sys_value_clean | regex_replace('[^0-9-]', '') | int }}

    lcredit_sys: >
      {% set sys_value = system_auth_complexity.stdout.split('lcredit=')[1] | default('0') %}
      {% set sys_value_clean = sys_value.split()[0] %}
      {{ sys_value_clean | regex_replace('[^0-9-]', '') | int }}

    ocredit_sys: >
      {% set sys_value = system_auth_complexity.stdout.split('ocredit=')[1] | default('0') %}
      {% set sys_value_clean = sys_value.split()[0] %}
      {{ sys_value_clean | regex_replace('[^0-9-]', '') | int }}

# Min length 설정
- set_fact:
    minlen: "{{ (minlen_pwq | int) if (minlen_pwq | int) > 0 else (minlen_sys | int) }}"

    # 각 credit 값을 두 파일에서 비교 후 하나라도 설정된 것이 있으면 사용
    dcredit: "{{ (dcredit_pwq | int) if (dcredit_pwq | int) != 0 else (dcredit_sys | int) }}"
    ucredit: "{{ (ucredit_pwq | int) if (ucredit_pwq | int) != 0 else (ucredit_sys | int) }}"
    lcredit: "{{ (lcredit_pwq | int) if (lcredit_pwq | int) != 0 else (lcredit_sys | int) }}"
    ocredit: "{{ (ocredit_pwq | int) if (ocredit_pwq | int) != 0 else (ocredit_sys | int) }}"

# Debugging minlen and credit values
- debug:
    msg: "minlen: {{ minlen }}, dcredit: {{ dcredit }}, ucredit: {{ ucredit }}, lcredit: {{ lcredit }}, ocredit: {{ ocredit }}"

# 취약성 검사 (임시 변수로 먼저 저장)
- set_fact:
    enforce_root: "{{ enforce_for_root_setting is not defined or 'enforce_for_root' not in enforce_for_root_setting.stdout }}"
    no_complexity: "{{ (pwquality_conf_complexity.stdout == '' and system_auth_complexity.stdout == '') }}"
    minlen_check: "{{ (minlen | int) < 8 }}"
    credit_check: "{{ (dcredit | int) > -1 or (ucredit | int) > -1 or (lcredit | int) > -1 or (ocredit | int) > -1 }}"
    all_credits_negative: "{{ (dcredit | int) == -1 and (ucredit | int) == -1 and (lcredit | int) == -1 and (ocredit | int) == -1 }}"

# Show the intermediate checks
- debug:
    msg: "minlen_check: {{ minlen_check }}, credit_check: {{ credit_check }}, all_credits_negative: {{ all_credits_negative }}"

# Final weak setting based on checks
- set_fact:
    weak: |
      {% if enforce_root %}
        true
      {% elif no_complexity %}
        true
      {% elif minlen_check or credit_check %}
        true
      {% elif all_credits_negative %}
        false
      {% else %}
        true
      {% endif %}

# Show the weak variable value for debugging
- debug:
    var: weak

# Remove comments and check the value of weak
- set_fact:
    weak_cleaned: "{{ weak.split('#')[0].strip() }}"

# Debug the cleaned weak value
- debug:
    msg: "Weak cleaned value: '{{ weak_cleaned }}'"

# If weak_cleaned contains 'true' or 'false', set weak to boolean
- set_fact:
    weak: "{{ weak_cleaned | lower == 'true' }}"

# Show the final weak variable value
- debug:
    var: weak

# result
- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'num': num, 'diag': diag, 'weak': True}] }}"
  when: weak

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'num': num, 'diag': diag, 'weak': False}] }}"
  when: not weak

