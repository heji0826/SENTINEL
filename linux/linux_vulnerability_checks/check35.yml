- set_fact:
    diag: "{{ {'항목': '최신 보안패치 및 벤더 권고사항 적용', 'id': 35, '조치방안': 'EOL 상태가 아닌 Linux OS 버전으로 업데이트, 최신 보안 패치 적용 Kernel 버전으로 업데이트'} }}"

- name: Linux OS 버전 확인 #EOL 버전인지 확인
  shell: "cat /etc/os-release | grep 'EOL'"
  register: linuxOSv
  ignore_errors: true 

- name: Kernel 버전 확인
  shell: " uname -r"
  register: Kernelv

- name: Linux OS 버전 진단
  set_fact:
    week_rocky: true  
  when: linuxOSv

- name: Linux OS 버전 진단
  set_fact:
    week_rocky: false  
  when: not linuxOSv

- name: 최신 Kernel 버전 링크에서 가져오기
  uri:
    url: "https://www.kernel.org/releases.json"  # 최신 커널 버전 정보를 제공하는 링크
    method: GET
    return_content: yes
  register: kernel_v

- name: 최신 Kernel 버전 설정
  set_fact:
    latest_kernel_version: "{{ kernel_v.json.latest_stable.version }}"  # JSON에서 최신 버전 가져오기

- name: 현재 Kernel 버전 진단
  set_fact:
    latest_kernel: false  # 기본값을 false로 설정
  when: Kernelv.stdout is version(latest_kernel_version, '<')  # 현재 버전이 최신 버전보다 작은 경우

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False, '조치방안': diag.조치방안 }] }}"
  when: not week_rocky and not latest_kernel  # EOL 버전이 아니고 최신 커널일 때

- block:
    - debug: 
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True, '조치방안': diag.조치방안  }] }}"
  when: week_rocky or latest_kernel  # EOL 버전이거나 최신 커널이 아닐 때