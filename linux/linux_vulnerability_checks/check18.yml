- set_fact:
    diag_ip: 
      { '항목': '접속 IP 제한', 'id': 18 }
    diag_port: 
      { '항목': '포트 제한', 'id': 18 }

- name: 본인 IP 확인
  shell: "hostname -I | awk '{print $1}'"  # 첫 번째 IP 주소를 확인
  register: ipconfig
  ignore_errors: true 

- set_fact:
    my_ip: "{{ ipconfig.stdout }}"  # 본인 IP 저장

- name: 접근 허용 IP 적절성 확인 (hosts.deny)
  shell: "cat /etc/hosts.deny"
  register: deny_check
  ignore_errors: true 

- name: 접근 허용 IP 적절성 확인 (hosts.allow)
  shell: "cat /etc/hosts.allow"
  register: allow_check
  ignore_errors: true 

- name: 접근 금지 IP 설정 확인
  set_fact:
    deny_check_status: "{{ 'ALL: ALL' in deny_check.stdout }}"
  when: deny_check.stdout is defined

- name: 접근 허용 IP 설정 확인
  set_fact:
    allow_check_status: "{{ my_ip in allow_check.stdout }}"
  when: allow_check.stdout is defined

- block:
    - debug:
        msg: "접속 IP 취약"
    - set_fact:
        result: "{{ result + [{'id': diag_ip.id, '제목': diag_ip.항목, '취약': true}] }}"
  when: not deny_check_status

- block:
    - debug:
        msg: "접속 IP 양호"
    - set_fact:
        result: "{{ result + [{'id': diag_ip.id, '제목': diag_ip.항목, '취약': false}] }}"
  when: deny_check_status

- block:
    - debug:
        msg: "접근 허용 IP 취약"
    - set_fact:
        result: "{{ result + [{'id': diag_port.id, '제목': diag_port.항목, '취약': not allow_check_status}] }}"
  when: not allow_check_status

- block:
    - debug:
        msg: "접근 허용 IP 양호"
    - set_fact:
        result: "{{ result + [{'id': diag_port.id, '제목': diag_port.항목, '취약': allow_check_status}] }}"
  when: allow_check_status

- name: 최종 결과 출력
  debug:
    msg: "{{ result }}"
