# header
- set_fact:
    diag: "{{ {'항목': '계정 잠금 임계값 설정', 'id': 3} }}"


# body

# Step 1: Check pam_tally2.so module in /etc/pam.d/system-auth
- name: Check pam_tally2.so module in /etc/pam.d/system-auth
  ansible.builtin.shell: grep pam_tally2.so /etc/pam.d/system-auth
  register: pam_tally_system_auth
  ignore_errors: yes

# Step 2: Check pam_tally2.so module in /etc/pam.d/password-auth
- name: Check pam_tally2.so module in /etc/pam.d/password-auth
  ansible.builtin.shell: grep pam_tally2.so /etc/pam.d/password-auth
  register: pam_tally_password_auth
  ignore_errors: yes

# Step 3: Get deny values from both files
- name: Get deny settings from /etc/pam.d/system-auth
  ansible.builtin.shell: grep -E 'deny=' /etc/pam.d/system-auth
  register: deny_system_auth
  ignore_errors: yes

- name: Get deny settings from /etc/pam.d/password-auth
  ansible.builtin.shell: grep -E 'deny=' /etc/pam.d/password-auth
  register: deny_password_auth
  ignore_errors: yes

# Debug: pam_tally_system_auth와 pam_tally_password_auth의 값 확인
- debug:
    msg: "pam_tally_system_auth: {{ pam_tally_system_auth }}, pam_tally_password_auth: {{ pam_tally_password_auth }}"

# Debug: deny_system_auth와 deny_password_auth의 값 확인
- debug:
    msg: "deny_system_auth: {{ deny_system_auth }}, deny_password_auth: {{ deny_password_auth }}"

# weak?
# pam_tally2 모듈 및 deny 설정 체크
- set_fact:
    pam_tally_missing: >
      {{ pam_tally_system_auth.stdout == '' and pam_tally_password_auth.stdout == '' }}

    # deny 설정을 각 파일에서 추출 및 int 변환
    deny_value_system_auth: >
      {% if deny_system_auth.stdout is defined and 'deny=' in deny_system_auth.stdout %}
        {{ deny_system_auth.stdout.split('deny=')[1].split()[0] | regex_replace('[^0-9]', '') | int }}
      {% else %}
        0
      {% endif %}

    deny_value_password_auth: >
      {% if deny_password_auth.stdout is defined and 'deny=' in deny_password_auth.stdout %}
        {{ deny_password_auth.stdout.split('deny=')[1].split()[0] | regex_replace('[^0-9]', '') | int }}
      {% else %}
        0
      {% endif %}

# Debug: deny_value_system_auth와 deny_value_password_auth의 값 확인
- debug:
    msg: "deny_value_system_auth: {{ deny_value_system_auth }}, deny_value_password_auth: {{ deny_value_password_auth }}"

# 두 파일 모두 deny 값이 5 이하인지 체크
- set_fact:
    deny_check: "{{ (deny_value_system_auth | int <= 5) and (deny_value_password_auth | int <= 5) }}"

# 취약성 검사
- set_fact:
    weak: |
      {% if pam_tally_missing %}
        true
      {% elif not deny_check %}
        true
      {% else %}
        false
      {% endif %}

# Show the weak variable value for debugging
- debug:
    var: weak

# Remove comments and check the value of weak
- set_fact:
    weak_cleaned: "{{ weak.split('#')[0].strip() }}"

# Debug the cleaned weak value
- debug:
    msg: "Weak cleaned value: '{{ weak_cleaned }}'"

# If weak_cleaned contains 'true' or 'false', set weak to boolean
- set_fact:
    weak: "{{ weak_cleaned | lower == 'true' }}"

# Show the final weak variable value
- debug:
    var: weak

# result
- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True}] }}"
  when: weak

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False}] }}"
  when: not weak


