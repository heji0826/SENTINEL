- set_fact:
    diag: "{{ { '항목': '웹 서비스 영역의 분리 조치', 'id': 1, '조치방안': '1. DocumentRoot 경로 수정, 2. Apache 재시작' } }}"

# DocumentRoot 설정 확인
- name: DocumentRoot 설정 확인
  shell: cat /etc/httpd/conf/httpd.conf | grep '^ *DocumentRoot'
  register: DocumentRoot_check
  ignore_errors: true

# DocumentRoot 취약 여부 판단
- set_fact:
    weak_documentroot: >
      {% if DocumentRoot_check.stdout.strip() | regex_search('DocumentRoot /var/security_apache') %}
        false   # DocumentRoot가 이미 /var/security_apache로 설정되어 있으면 양호
      {% else %}
        true    # 설정이 없거나 다르면 취약
      {% endif %}

# 취약한 경우 DocumentRoot 경로 폴더 생성 및 수정
- block:
    - name: DocumentRoot 경로 폴더 생성
      file:
        path: /var/security_apache
        state: directory
      register: DocumentRoot_dir_action

    - name: DocumentRoot 경로 수정
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        state: present
        regexp: '^ *DocumentRoot *'
        line: 'DocumentRoot /var/security_apache'  # DocumentRoot 경로 수정
      register: DocumentRoot_file_action

    - name: Apache 재시작
      service:
        name: httpd
        state: restarted
      when: DocumentRoot_file_action.changed

# DocumentRoot 설정 재확인
- name: DocumentRoot 설정 재확인
  shell: cat /etc/httpd/conf/httpd.conf | grep '^ *DocumentRoot'
  register: DocumentRoot_check_after
  ignore_errors: true

# DocumentRoot 상태 재평가
- set_fact:
    weak_documentroot: >
      {% if DocumentRoot_check_after.stdout.strip() | regex_search('DocumentRoot /var/security_apache') %}
        false
      {% else %}
        true
      {% endif %}


- block:
  - debug:
      msg: "취약"
  - set_fact:
      result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True, '조치방안': diag.조치방안 }] }}"
  when: (weak_documentroot | regex_search('false')) is none

# 양호한 경우 처리
- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False, '조치방안': diag.조치방안 }] }}"
  when: (weak_documentroot | regex_search('false')) is not none