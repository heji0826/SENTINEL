# header
- set_fact:
    diag: "{{ {'항목': '익명 FTP 접속 차단 확인', 'id': 21} }}"

# body
# Step 1: Check if ftp account exists in /etc/passwd
- name: Check if ftp account exists in /etc/passwd
  ansible.builtin.shell: cat /etc/passwd | grep '^ftp'
  register: ftp_account_check
  ignore_errors: yes

- name: Debug ftp account check from /etc/passwd
  debug:
    msg: "FTP account check: {{ ftp_account_check.stdout }}"

# Step 2: Check if UserAlias is commented out in /etc/proftpd/proftpd.conf
- name: Check if /etc/proftpd/proftpd.conf exists
  ansible.builtin.stat:
    path: /etc/proftpd/proftpd.conf
  register: proftpd_conf_file

- name: Check UserAlias in /etc/proftpd/proftpd.conf
  ansible.builtin.shell: grep 'UserAlias' /etc/proftpd/proftpd.conf
  register: proftpd_useralias
  when: proftpd_conf_file.stat.exists
  ignore_errors: yes

- name: Mark UserAlias check as safe if /etc/proftpd/proftpd.conf does not exist
  set_fact:
    proftpd_useralias_safe: true
  when: not proftpd_conf_file.stat.exists

# Step 3: Check if anonymous_enable is set to NO in /etc/vsftpd.conf
- name: Check if /etc/vsftpd.conf exists
  ansible.builtin.stat:
    path: /etc/vsftpd.conf
  register: vsftpd_conf_file

- name: Check for anonymous_enable in /etc/vsftpd.conf
  ansible.builtin.shell: grep 'anonymous_enable' /etc/vsftpd.conf
  register: vsftpd_anonymous_enable
  when: vsftpd_conf_file.stat.exists
  ignore_errors: yes

- name: Mark anonymous_enable as safe if /etc/vsftpd.conf does not exist
  set_fact:
    vsftpd_anonymous_safe: true
  when: not vsftpd_conf_file.stat.exists

# Step 4: Determine weak state based on conditions
- name: Check if system is vulnerable
  set_fact:
    weak: "{{ 
      (ftp_account_check.stdout != '') or 
      (proftpd_conf_file.stat.exists and proftpd_useralias.stdout is defined and proftpd_useralias.stdout != '' and proftpd_useralias.stdout is not search('^#')) or 
      (vsftpd_conf_file.stat.exists and vsftpd_anonymous_enable.stdout is defined and vsftpd_anonymous_enable.stdout is search('anonymous_enable=YES'))
    }}"

# Step 5: If all configuration files are absent, mark as secure
- name: Mark as secure if both configuration files are absent and no ftp account
  set_fact:
    weak: false
  when: 
    - proftpd_conf_file.stat.exists == false
    - vsftpd_conf_file.stat.exists == false
    - ftp_account_check.stdout == ''

# Step 6: Display the vulnerability status
- name: Display the vulnerability status
  debug:
    msg: >
      Vulnerable? {{ weak | ternary('True', 'False') }}.
      FTP account exists? {{ ftp_account_check.stdout != '' }}.
      UserAlias in proftpd.conf? {{ proftpd_conf_file.stat.exists and proftpd_useralias.stdout != '' }}.
      anonymous_enable in vsftpd.conf set to YES? {{ vsftpd_conf_file.stat.exists and vsftpd_anonymous_enable.stdout is search('anonymous_enable=YES') }}.

# result
- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True}] }}"
  when: weak

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False}] }}"
  when: not weak
