# header
- set_fact:
    diag: "{{ {'항목': 'Sendmail 및 Postfix 버전 확인', 'id': 22,'조치방안': 'Sendmail 및 Postfix 최신 버전 패치 진행'} }}"  # 항목과 ID 설정

# body

# Step 1: Check if Sendmail process is running
- name: Check Sendmail process
  ansible.builtin.shell: ps -ef | grep sendmail | grep -v grep
  register: sendmail_process
  ignore_errors: yes
  failed_when: false

# Step 2: Get current Sendmail version from /etc/mail/sendmail.cf if process is running
- name: Get current Sendmail version
  ansible.builtin.shell: cat /etc/mail/sendmail.cf | grep DZ
  register: current_sendmail_version
  when: sendmail_process.stdout != ''
  ignore_errors: yes
  failed_when: false

# Step 3: Fetch latest Sendmail version using GET request
- name: Get latest Sendmail version from official site
  ansible.builtin.uri:
    url: "https://www.proofpoint.com/us/products/email-protection/open-source-email-solution"
    method: GET
    return_content: yes
  register: latest_sendmail_response
  ignore_errors: yes
  failed_when: false

# Step 3.1: Debug the first 500 characters of the response content
- name: Display part of the content for debugging
  debug:
    msg: "{{ latest_sendmail_response.content[:500] }}"

# Step 3.2: Extract Sendmail version from href using regex
- name: Extract Sendmail version using regex
  ansible.builtin.set_fact:
    latest_sendmail_version: "{{ latest_sendmail_response.content | regex_search('https://ftp\\.sendmail\\.org/sendmail\\.(\\d+\\.\\d+\\.\\d+)\\.tar\\.gz', '\\1') }}"
  when: latest_sendmail_response.content is defined

# Step 3.3: Display the extracted version
- name: Display the latest Sendmail version extracted
  debug:
    msg: "Latest Sendmail version extracted: {{ latest_sendmail_version }}"
  when: latest_sendmail_version is defined

- debug:
    var: latest_sendmail_version
- debug:
    var: current_sendmail_version
    
# Step 4: Compare Sendmail versions (only if the version was found)
- name: Compare Sendmail versions
  set_fact:
    sendmail_vulnerable: "{{ current_sendmail_version.stdout | regex_search('DZ(.*)') | first != latest_sendmail_version[0] }}"
  when: current_sendmail_version is defined and current_sendmail_version.stdout is defined and current_sendmail_version.stdout != ''
  ignore_errors: yes
  failed_when: false

# Step 5: Check if Postfix process is running
- name: Check Postfix process
  ansible.builtin.shell: systemctl status postfix
  register: postfix_process
  ignore_errors: yes
  failed_when: false

# Step 6: Get current Postfix version using postconf if process is running
- name: Get current Postfix version
  ansible.builtin.shell: postconf -d | grep mail_version
  register: current_postfix_version
  when: postfix_process.stdout != ''
  ignore_errors: yes
  failed_when: false

# Step 7: Fetch latest Postfix version using GET request
- name: Get latest Postfix version from official site
  ansible.builtin.uri:
    url: "http://www.postfix.org/announcements.html"  # Example URL for latest Postfix version
    method: GET
    return_content: yes
  register: latest_postfix_version
  when: postfix_process.stdout != ''
  ignore_errors: yes
  failed_when: false

# Step 7.1: Debug the latest Postfix version
- name: Display the latest Postfix version fetched
  debug:
    msg: "Latest Postfix version from the official site: {{ latest_postfix_version.content }}"
  when: postfix_process.stdout != ''

# Step 7.1: Debug the latest Postfix version
- name: Display the latest Postfix version fetched
  debug:
    msg: "Latest Postfix version from the official site: {{ latest_postfix_version.content }}"
  when: postfix_process.stdout != ''

# Set Fact for latest Postfix version only when Postfix is running
- name: Set latest Postfix version fact
  set_fact:
    lastest_postfix_version: "{{ latest_postfix_version.content | regex_search('[0-9]+\\.[0-9]+\\.[0-9]') }}"
  when: 
    - latest_postfix_version.content is defined
    - postfix_process.stdout != ''
  ignore_errors: yes

- debug:
    var: lastest_postfix_version
- debug:
    var: current_postfix_version

# Step 8: Compare Postfix versions (only if the version was found)
- name: Compare Postfix versions
  set_fact:
    postfix_vulnerable: "{{ current_postfix_version.stdout | regex_search('mail_version = (.*)') | first != latest_postfix_version }}"
  when: current_postfix_version is defined and current_postfix_version.stdout is defined and current_postfix_version.stdout != ''
  ignore_errors: yes
  failed_when: false

# Step 9: Determine weak state based on Sendmail and Postfix vulnerabilities
- name: Determine vulnerability state
  set_fact:
    weak: "{{ (sendmail_vulnerable | default(false)) or (postfix_vulnerable | default(false)) }}"
  when: sendmail_vulnerable is defined or postfix_vulnerable is defined
  ignore_errors: yes
  failed_when: false

# Step 10: Mark as secure if both services are not running
- name: Mark as secure if both Sendmail and Postfix are not running
  set_fact:
    weak: false
  when: 
    - sendmail_process.stdout == ''
    - postfix_process.stdout == ''
  ignore_errors: yes
  failed_when: false

# Step 11: Display the vulnerability status
- name: Display the vulnerability status
  debug:
    msg: >
      Vulnerable? {{ weak | ternary('True', 'False') }}.
      Sendmail Vulnerable? {{ sendmail_vulnerable | default(false) | ternary('True', 'False') }}.
      Postfix Vulnerable? {{ postfix_vulnerable | default(false) | ternary('True', 'False') }}.

- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True, '조치방안': diag.조치방안}] }}"
  when: weak

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False, '조치방안': diag.조치방안}] }}"
  when: not weak
