- set_fact:
    diag: "{{ {'항목': '사용자, 시스템 시작파일, 환경파일 소유자 및 권한 설정', 'id': 15, '조치방안': '1. 소유자 변경, 2. 일반 사용자 쓰기 권한 제거'} }}"
    # diag_file: 
    #   { '항목': '디렉토리 소유자 및 권한 확인', 'id': 15 }
    # diag_dir: 
    #   { '항목': '파일 소유자 및 권한 확인', 'id': 15 }

- name: 취약 변수 선언
  set_fact:
    weak_user: true

- name: 사용자 홈 디렉터리 확인
  shell: "cat /etc/passwd | grep /home | cut -d: -f1"
  register: home_check
  ignore_errors: true 

- name: 디렉토리 소유자 및 권한 확인 
  shell: "ls -ld /home/{{ item }}"
  register: user_check
  loop: "{{ home_check.stdout_lines }}"
  ignore_errors: true

- name: 파일 소유자 및 권한 확인
  shell: "ls -la /home/{{ item }}"
  register: user_file_check
  loop: "{{ home_check.stdout_lines }}"
  ignore_errors: true

- name: 디렉토리 권한 취약점 판단
  set_fact:
    weak_user: false  # 기본값을 false로 설정
  when: user_check is defined

- name: 디렉토리 취약점 확인
  set_fact:
    weak_user: true
  when: user_check is defined and user_check.results | selectattr('stdout', 'search', '^-rw-r--r--') | list | length == 0

- name: 파일 권한 취약점 판단
  set_fact:
    weak_user: false  # 기본값을 false로 설정
  when: user_file_check is defined

- name: 파일 취약점 확인
  set_fact:
    weak_user: true
  when: user_file_check is defined and user_file_check.results | selectattr('stdout', 'search', '^-rw-r--r--') | list | length == 0


## 최종 결과 
- block:
    - debug:
        msg: "취약"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': True, '조치방안': diag.조치방안}] }}"
  when: weak_user

- block:
    - debug:
        msg: "양호"
    - set_fact:
        result: "{{ result + [{'id': diag.id, '제목': diag.항목, '취약': False, '조치방안': diag.조치방안}] }}"
  when: not weak_user


